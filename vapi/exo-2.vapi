/* exo-2.vapi generated by vapigen-0.26, do not modify. */

namespace Exo {
	[CCode (cheader_filename = "exo/exo.h")]
	[Compact]
	public class Extensions {
		public static Gdk.Pixbuf gdk_pixbuf_colorize (Gdk.Pixbuf src, Gdk.Color color);
		public static Gdk.Pixbuf gdk_pixbuf_frame (Gdk.Pixbuf src, Gdk.Pixbuf frame, int left_offset, int top_offset, int right_offset, int bottom_offset);
		public static Gdk.Pixbuf gdk_pixbuf_lucent (Gdk.Pixbuf src, uint percent);
		public static Gdk.Pixbuf gdk_pixbuf_new_from_file_at_max_size (string filename, int max_width, int max_height, bool preserve_aspect_ratio) throws GLib.Error;
		public static Gdk.Pixbuf gdk_pixbuf_scale_down (Gdk.Pixbuf source, bool preserve_aspect_ratio, int dest_width, int dest_height);
		public static Gdk.Pixbuf gdk_pixbuf_scale_ratio (Gdk.Pixbuf source, int dest_size);
		public static Gdk.Pixbuf gdk_pixbuf_spotlight (Gdk.Pixbuf src);
	}
	[CCode (cheader_filename = "exo/exo.h")]
	public class Job : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Job ();
		public void cancel ();
		public void emit (uint signal_id, GLib.Quark signal_detail);
		[NoWrapper]
		public virtual bool execute () throws GLib.Error;
		public unowned GLib.Cancellable get_cancellable ();
		public void info_message (string format);
		public bool is_cancelled ();
		public unowned Exo.Job launch ();
		public void percent (double percent);
		public bool send_to_mainloop (GLib.SourceFunc func, GLib.DestroyNotify destroy_notify);
		public bool set_error_if_cancelled () throws GLib.Error;
		public virtual signal void error (void* error);
		public virtual signal void finished ();
		[CCode (cname = "info_message")]
		public virtual signal void info_message_received (string message);
		[CCode (cname = "percent")]
		public virtual signal void percent_progress (double percent);
	}
	[CCode (cheader_filename = "exo/exo.h")]
	public class SimpleJob : Exo.Job {
		[CCode (has_construct_function = false)]
		protected SimpleJob ();
		public static unowned Exo.Job launch (Exo.SimpleJobFunc func, uint n_param_values);
	}
	[CCode (cheader_filename = "exo/exo.h")]
	[Compact]
	public class SimpleJobClass {
	}
	[CCode (cheader_filename = "exo/exo.h")]
	[Compact]
	public class String {
		[CCode (cname = "exo_strdup_strftime")]
		public static string dup_strftime (string format, void* tm);
		[CCode (cname = "exo_str_elide_underscores")]
		public static string elide_underscores (string text);
		[CCode (cname = "exo_str_is_equal")]
		public static bool is_equal (string? a, string? b);
		[CCode (cname = "exo_strndupv")]
		public static string[] ndupv (string[] strv, int num);
		[CCode (cname = "exo_str_replace")]
		public static string replace (string str, string pattern, string replacement);
	}
	[CCode (cheader_filename = "exo/exo.h", has_target = false)]
	public delegate bool SimpleJobFunc (Exo.Job job, GLib.ValueArray param_values) throws GLib.Error;
	[CCode (cheader_filename = "exo/exo.h")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "exo/exo.h")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "exo/exo.h")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "exo/exo.h")]
	public const int PARAM_READABLE;
	[CCode (cheader_filename = "exo/exo.h")]
	public const int PARAM_READWRITE;
	[CCode (cheader_filename = "exo/exo.h")]
	public const int PARAM_WRITABLE;
	[CCode (cheader_filename = "exo/exo.h")]
	public static unowned string check_version (uint required_major, uint required_minor, uint required_micro);
}
