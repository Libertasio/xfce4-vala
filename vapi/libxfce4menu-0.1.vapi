/* libxfce4menu-0.1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Xfce", lower_case_cprefix = "xfce_")]
namespace Xfce {
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class Menu : GLib.Object, Xfce.MenuElement {
		public void add_menu (Xfce.Menu submenu);
		public unowned GLib.SList get_app_dirs ();
		public bool get_deleted ();
		public unowned Xfce.MenuDirectory get_directory ();
		public unowned GLib.SList get_directory_dirs ();
		public static unowned string get_environment ();
		public unowned string get_filename ();
		public unowned Xfce.MenuItemPool get_item_pool ();
		public unowned GLib.SList get_items ();
		public unowned GLib.SList get_layout_elements ();
		public unowned GLib.SList get_legacy_dirs ();
		public unowned Xfce.Menu get_menu_with_name (string name);
		public unowned GLib.SList get_menus ();
		public bool get_only_unallocated ();
		public unowned Xfce.Menu get_parent ();
		public static unowned Xfce.Menu get_root () throws GLib.Error;
		public bool has_layout ();
		public static void init (string env);
		public void* monitor_add_directory (string directory);
		public void* monitor_add_file (string filename);
		public void* monitor_add_item (Xfce.MenuItem item);
		public static Xfce.MenuMonitorFlags monitor_get_flags ();
		public static bool monitor_has_flags (Xfce.MenuMonitorFlags flags);
		public void monitor_remove_directory (string directory);
		public void monitor_remove_file (string filename);
		public void monitor_remove_item (Xfce.MenuItem item);
		public static void monitor_set_flags (Xfce.MenuMonitorFlags flags);
		public static void monitor_set_vtable (Xfce.MenuMonitorVTable vtable);
		[CCode (has_construct_function = false)]
		public Menu (string filename) throws GLib.Error;
		public void set_deleted (bool deleted);
		public void set_directory (Xfce.MenuDirectory directory);
		public static void set_environment (string env);
		public void set_filename (string filename);
		public void set_name (string name);
		public void set_only_unallocated (bool only_unallocated);
		public static void shutdown ();
		public bool deleted { get; set; }
		public Xfce.MenuDirectory directory { get; set; }
		public string filename { get; set; }
		public string name { get; set; }
		public bool only_unallocated { get; set; }
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuAndRules : Xfce.MenuStandardRules, Xfce.MenuRules {
		[CCode (has_construct_function = false)]
		public MenuAndRules ();
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuAndRulesClass {
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuDirectory : GLib.Object {
		public unowned string get_comment ();
		public unowned string get_filename ();
		public bool get_hidden ();
		public unowned string get_icon ();
		public unowned string get_name ();
		public bool get_no_display ();
		public void set_comment (string comment);
		public void set_filename (string name);
		public void set_icon (string icon);
		public void set_name (string name);
		public void set_no_display (bool no_display);
		public bool show_in_environment ();
		public string comment { get; set; }
		public string filename { get; set; }
		public string icon { get; set; }
		public string name { get; set; }
		public bool no_display { get; set; }
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuDirectoryClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuItem : GLib.Object, Xfce.MenuElement {
		public void decrement_allocated ();
		public int get_allocated ();
		public unowned GLib.List get_categories ();
		public unowned string get_command ();
		public unowned string get_comment ();
		public unowned string get_desktop_id ();
		public unowned string get_filename ();
		public unowned string get_generic_name ();
		public bool get_no_display ();
		public unowned string get_path ();
		public unowned string get_try_exec ();
		public bool has_category (string category);
		public void increment_allocated ();
		[CCode (has_construct_function = false)]
		public MenuItem (string filename);
		public bool only_show_in_environment ();
		public void @ref ();
		public void set_categories (GLib.List categories);
		public void set_command (string command);
		public void set_comment (string comment);
		public void set_desktop_id (string desktop_id);
		public void set_filename (string filename);
		public void set_generic_name (string generic_name);
		public void set_icon_name (string icon_name);
		public void set_name (string name);
		public void set_no_display (bool no_display);
		public void set_path (string path);
		public void set_requires_terminal (bool requires_terminal);
		public void set_supports_startup_notification (bool supports_startup_notification);
		public void set_try_exec (string try_exec);
		public bool show_in_environment ();
		public void unref ();
		[CCode (cname = "xfce_menu_item_requires_terminal")]
		public bool xfce_menu_item_requires_terminal ();
		[CCode (cname = "xfce_menu_item_supports_startup_notification")]
		public bool xfce_menu_item_supports_startup_notification ();
		public string command { get; set; }
		public string comment { get; set; }
		public string desktop_id { get; set; }
		public string filename { get; set; }
		public string generic_name { get; set; }
		public string icon_name { get; set; }
		public string name { get; set; }
		public bool no_display { get; set; }
		public string path { get; set; }
		[NoAccessorMethod]
		public bool requires_terminal { get; set; }
		[NoAccessorMethod]
		public bool supports_startup_notification { get; set; }
		public string try_exec { get; set; }
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuItemCache : GLib.Object {
		public void @foreach (GLib.HFunc func);
		public static unowned Xfce.MenuItemCache get_default ();
		public void invalidate ();
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuItemCacheClass {
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuItemClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuItemPool : GLib.Object {
		public void apply_exclude_rule (Xfce.MenuStandardRules rule);
		public void @foreach (GLib.HFunc func);
		public bool get_empty ();
		public void insert (Xfce.MenuItem item);
		public unowned Xfce.MenuItem lookup (string desktop_id);
		[CCode (has_construct_function = false)]
		public MenuItemPool ();
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuItemPoolClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuLayout : GLib.Object {
		public void add_filename (string filename);
		public void add_menuname (string menuname);
		public void add_merge (Xfce.MenuLayoutMergeType type);
		public void add_separator ();
		public bool get_filename_used (string filename);
		public bool get_menuname_used (string menuname);
		public unowned GLib.SList get_nodes ();
		[CCode (has_construct_function = false)]
		public MenuLayout ();
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuLayoutClass {
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuLayoutNode {
		public unowned string get_filename ();
		public unowned string get_menuname ();
		public Xfce.MenuLayoutMergeType get_merge_type ();
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuMonitorVTable {
		public weak GLib.Callback monitor_directory;
		public weak GLib.Callback monitor_file;
		public weak GLib.Callback remove_monitor;
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuMove : GLib.Object {
		public unowned string get_new ();
		public unowned string get_old ();
		public void set_new (string @new);
		public void set_old (string old);
		[CCode (cname = "xfce_menu_move_new", has_construct_function = false)]
		public MenuMove.xfce_menu_move_new ();
		public string @new { get; set; }
		public string old { get; set; }
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuMoveClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuNotRules : Xfce.MenuStandardRules, Xfce.MenuRules {
		[CCode (has_construct_function = false)]
		public MenuNotRules ();
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuNotRulesClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuOrRules : Xfce.MenuStandardRules, Xfce.MenuRules {
		[CCode (has_construct_function = false)]
		public MenuOrRules ();
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuOrRulesClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuSeparator : GLib.Object, Xfce.MenuElement {
		public static unowned Xfce.MenuSeparator get_default ();
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuSeparatorClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuStandardRules : GLib.Object, Xfce.MenuRules {
		public uint all;
		public weak GLib.List categories;
		public weak GLib.List filenames;
		public weak GLib.List rules;
		public bool get_include ();
		public void set_include (bool include);
		public bool include { get; set; }
	}
	[Compact]
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public class MenuStandardRulesClass {
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public interface MenuElement : GLib.Object {
		public abstract unowned string get_icon_name ();
		public abstract unowned string get_name ();
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public interface MenuRules : GLib.Object {
		public abstract void add_all ();
		public abstract void add_category (string category);
		public abstract void add_filename (string filename);
		public abstract void add_rules (Xfce.MenuRules additional_rules);
		public abstract bool match (Xfce.MenuItem item);
	}
	[CCode (cprefix = "XFCE_MENU_LAYOUT_MERGE_", has_type_id = "0", cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public enum MenuLayoutMergeType {
		MENUS,
		FILES,
		ALL
	}
	[CCode (cprefix = "XFCE_MENU_LAYOUT_NODE_", has_type_id = "0", cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public enum MenuLayoutNodeType {
		INVALID,
		FILENAME,
		MENUNAME,
		SEPARATOR,
		MERGE
	}
	[CCode (cprefix = "XFCE_MENU_MONITOR_", has_type_id = "0", cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public enum MenuMonitorFlags {
		DIRECTORIES,
		MENU_FILES,
		DIRECTORY_FILES,
		DESKTOP_FILES
	}
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public const int LIBXFCE4MENU_MAJOR_VERSION;
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public const int LIBXFCE4MENU_MICRO_VERSION;
	[CCode (cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public const int LIBXFCE4MENU_MINOR_VERSION;
	[CCode (cname = "libxfce4menu_check_version", cheader_filename = "libxfce4menu/libxfce4menu.h")]
	public static unowned string libxfce4menu_check_version (uint required_major, uint required_minor, uint required_micro);
}
