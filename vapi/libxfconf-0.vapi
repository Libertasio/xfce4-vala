/* libxfconf-0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Xfconf", lower_case_cprefix = "xfconf_")]
namespace Xfconf {
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public class Channel : GLib.Object {
		public static unowned Xfconf.Channel get (string channel_name);
		public bool get_array (string property, ...);
		public bool get_array_valist (string property, GLib.Type first_value_type, void* var_args);
		public unowned GLib.PtrArray get_arrayv (string property);
		public bool get_bool (string property, bool default_value);
		public double get_double (string property, double default_value);
		public int32 get_int (string property, int32 default_value);
		public bool get_named_struct (string property, string struct_name, void* value_struct);
		public unowned GLib.HashTable get_properties (string property_base);
		public bool get_property (string property, GLib.Value value);
		public unowned string get_string (string property, string default_value);
		public unowned string get_string_list (string property);
		public bool get_struct (string property, void* value_struct, ...);
		public bool get_struct_valist (string property, void* value_struct, GLib.Type first_member_type, void* var_args);
		public bool get_structv (string property, void* value_struct, uint n_members, GLib.Type[] member_types);
		public uint32 get_uint (string property, uint32 default_value);
		public uint64 get_uint64 (string property, uint64 default_value);
		public bool has_property (string property);
		public bool is_property_locked (string property);
		[CCode (has_construct_function = false)]
		public Channel (string channel_name);
		public void reset_property (string property_base, bool recursive);
		public bool set_array (string property, ...);
		public bool set_array_valist (string property, GLib.Type first_value_type, void* var_args);
		public bool set_arrayv (string property, GLib.PtrArray values);
		public bool set_bool (string property, bool value);
		public bool set_double (string property, double value);
		public bool set_int (string property, int32 value);
		public bool set_named_struct (string property, string struct_name, void* value_struct);
		public bool set_property (string property, GLib.Value value);
		public bool set_string (string property, string value);
		public bool set_string_list (string property, string values);
		public bool set_struct (string property, void* value_struct, ...);
		public bool set_struct_valist (string property, void* value_struct, GLib.Type first_member_type, void* var_args);
		public bool set_structv (string property, void* value_struct, uint n_members, GLib.Type[] member_types);
		public bool set_uint (string property, uint32 value);
		public bool set_uint64 (string property, uint64 value);
		[CCode (has_construct_function = false)]
		public Channel.with_property_base (string channel_name, string property_base);
		[NoAccessorMethod]
		public string channel_name { owned get; construct; }
		[NoAccessorMethod]
		public string property_base { owned get; construct; }
		public virtual signal void property_changed (string p0, GLib.Value p1);
	}
	[CCode (cprefix = "XFCONF_ERROR_", cheader_filename = "xfconf/xfconf.h")]
	public enum Error {
		UNKNOWN,
		CHANNEL_NOT_FOUND,
		PROPERTY_NOT_FOUND,
		READ_FAILURE,
		WRITE_FAILURE,
		PERMISSION_DENIED,
		INTERNAL_ERROR,
		NO_BACKEND,
		INVALID_PROPERTY,
		INVALID_CHANNEL
	}
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static void array_free (GLib.PtrArray arr);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static ulong g_property_bind (Xfconf.Channel channel, string xfconf_property, GLib.Type xfconf_property_type, void* object, string object_property);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static ulong g_property_bind_gdkcolor (Xfconf.Channel channel, string xfconf_property, void* object, string object_property);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static void g_property_unbind (ulong id);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static void g_property_unbind_all (void* channel_or_object);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static void g_property_unbind_by_property (Xfconf.Channel channel, string xfconf_property, void* object, string object_property);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static int16 g_value_get_int16 (GLib.Value value);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static uint16 g_value_get_uint16 (GLib.Value value);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static void g_value_set_int16 (GLib.Value value, int16 v_int16);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static void g_value_set_uint16 (GLib.Value value, uint16 v_uint16);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static GLib.Quark get_error_quark ();
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static bool init () throws GLib.Error;
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static GLib.Type int16_get_type ();
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static unowned string list_channels ();
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static void named_struct_register (string struct_name, uint n_members, GLib.Type[] member_types);
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static void shutdown ();
	[CCode (cheader_filename = "xfconf/xfconf.h")]
	public static GLib.Type uint16_get_type ();
}
